# See https://github.com/dependabot/dependabot-core/issues/2268#issuecomment-831376155
name: Auto Merge

on:
  workflow_run:
    workflows:
      - Pull Request
    types:
      - completed

env:
  ALLOWED_LABEL: 'dependencies'
  ALLOWED_TITLE_PREFIX: 'build(deps):'

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - uses: actions/github-script@v4
        with:
          # Use PAT in order to invoke other workflows.
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.workflow_run.pull_requests[0].number;

            const pr = await github.pulls.get({ owner, repo, pull_number });

            if (!pr.data.labels.some((label) => label.name === process.env.ALLOWED_LABEL)) {
              console.log(`Not Merged: Labels must contains "${process.env.ALLOWED_LABEL}"`);
              return;
            }

            if (!pr.data.title.startsWith(process.env.ALLOWED_TITLE_PREFIX)) {
              console.log(`Not Merged: Title must start with "${process.env.ALLOWED_TITLE_PREFIX}"`);
              return;
            }

            // The branch will be deleted automatically.
            await github.pulls.merge({ owner, repo, pull_number });
            console.log(`Merged #${pull_number} successfully`);

  auto-close:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'failure'
    steps:
      - uses: actions/github-script@v4
        with:
          # Use PAT in order to invoke other workflows.
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.workflow_run.pull_requests[0].number;

            const pr = await github.pulls.get({ owner, repo, pull_number });

            if (!pr.data.labels.some((label) => label.name === process.env.ALLOWED_LABEL)) {
              console.log(`Not Merged: Labels must contains "${process.env.ALLOWED_LABEL}"`);
              return;
            }

            if (!pr.data.title.startsWith(process.env.ALLOWED_TITLE_PREFIX)) {
              console.log(`Not Closed: Title must start with "${process.env.ALLOWED_TITLE_PREFIX}"`);
              return;
            }

            await github.pulls.update({ owner, repo, pull_number, state: 'closed' });
            console.log(`Closed #${pull_number} successfully`);

            const ref = `heads/${pr.data.head.ref}`;
            await github.git.deleteRef({ owner, repo, ref });
            console.log(`Deleted ${pr.data.head.ref} automatically`);
