# DO NOT EDIT THIS FILE BY HAND.
#
# This file was generated by .github/workflows/update.sh automagically.
name: CI
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
jobs:
  linux-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache for external projects
        uses: actions/cache@v2
        with:
          path: build/vendor
          key: ${{ runner.os }}-linux-build-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-linux-build-
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends autoconf automake cmake dos2unix g++ libtool make ninja-build pkg-config
      - name: Generate project files
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D MIRAKC_ARIB_TEST=ON
      - name: Build vendor libraries
        run: |
          ninja -C build vendor
      - name: Build
        run: |
          ninja -C build
      - name: Show help
        run: |
          build/bin/mirakc-arib -h
      - name: Run test
        run: |
          ninja -C build test
          ninja -C build cli-tests
  macos-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache for external projects
        uses: actions/cache@v2
        with:
          path: build/vendor
          key: ${{ runner.os }}-macos-build-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-macos-build-
      - name: Install deps
        run: |
          brew install autoconf automake gnu-sed grep dos2unix libtool make ninja pkg-config
      - name: Generate project files
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D MIRAKC_ARIB_TEST=ON
      - name: Build vendor libraries
        run: |
          ninja -C build vendor
      - name: Build
        run: |
          ninja -C build
      - name: Show help
        run: |
          build/bin/mirakc-arib -h
      - name: Run tests
        run: |
          ninja -C build test
          ninja -C build cli-tests
  arm-linux-build:
    strategy:
      matrix:
        arch:
          - armel
          - armhf
          - arm64
        include:
          - arch: armel
            host-triple: arm-linux-gnueabi
            elf-machine: 'ARM'
            elf-flags: 'soft-float'
            docker-arch: arm32v5
          - arch: armhf
            host-triple: arm-linux-gnueabihf
            elf-machine: 'ARM'
            elf-flags: 'hard-float'
            docker-arch: arm32v7
          - arch: arm64
            host-triple: aarch64-linux-gnu
            elf-machine: 'AArch64'
            elf-flags: ''
            docker-arch: arm64v8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache for external projects
        uses: actions/cache@v2
        with:
          path: build/vendor
          key: ${{ runner.os }}-arm-build-${{ matrix.arch }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-arm-build-${{ matrix.arch }}-
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends autoconf automake cmake dos2unix g++-8-${{ matrix.host-triple }} libtool make ninja-build pkg-config
          sudo update-alternatives --install /usr/bin/${{ matrix.host-triple }}-gcc ${{ matrix.host-triple }}-gcc /usr/bin/${{ matrix.host-triple }}-gcc-8 80
          sudo update-alternatives --install /usr/bin/${{ matrix.host-triple }}-g++ ${{ matrix.host-triple }}-g++ /usr/bin/${{ matrix.host-triple }}-g++-8 80
      - name: Generate project files
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D MIRAKC_ARIB_TEST=ON -D CMAKE_TOOLCHAIN_FILE=toolchain.cmake.d/debian-${{ matrix.arch }}.cmake .
      - name: Build vendor libraries
        run: |
          ninja -C build vendor
      - name: Build
        run: |
          ninja -C build
      - name: Check the binary format
        run: |
          readelf -h build/bin/mirakc-arib | grep Machine | grep '${{ matrix.elf-machine }}'
          readelf -h build/bin/mirakc-arib | grep Flags | grep '${{ matrix.elf-flags }}'
      - name: Setup QEMU user-mode emulation
        uses: docker/setup-qemu-action@v1
      - name: Show help
        run: |
          docker run --rm -v $(pwd)/build:/build ${{ matrix.docker-arch }}/debian:buster-slim /build/bin/mirakc-arib -h
      - name: Run tests
        run: |
          docker run --rm -v $(pwd)/build:/build ${{ matrix.docker-arch }}/debian:buster-slim /build/bin/mirakc-arib-test --gtest_shuffle
          docker run --rm -v $(pwd)/build:/build -v $(pwd)/test:/test ${{ matrix.docker-arch }}/debian:buster-slim sh /test/cli_tests.sh /build/bin/mirakc-arib
  coverage:
    needs:
      - linux-build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Cache for external projects
        uses: actions/cache@v2
        with:
          path: build/vendor
          key: ${{ runner.os }}-coverage-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-coverage-
      - name: Cache for grcov
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-grcov
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends autoconf automake cmake dos2unix g++ libtool make ninja-build pkg-config
      - name: Generate project files
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Debug -D MIRAKC_ARIB_TEST=ON -D MIRAKC_ARIB_COVERAGE=ON
      - name: Build vendor libraries
        run: |
          ninja -C build vendor
      - name: Build
        run: |
          ninja -C build
      - name: Run test
        run: |
          ninja -C build test
          ninja -C build cli-tests
      - name: Install grcov
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: grcov
      - name: Generate coverage data
        run: >-
          grcov build --branch --llvm --ignore-not-existing -s . -p .. --ignore 'test/*' -t lcov -o lcov.info
      - name: Update to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: lcov.info
